server.port=8071
spring.application.name=configserver
#spring.profiles.active=native // native works with LOCAL CLASSPATH & FILESYSTEM paths approach
#spring.cloud.config.server.native.search-locations=classpath:/config // THE CASE WHEN I need to read my configurations from classPath(local system, usually it stores - configserver/resources/config/..properties)
#spring.cloud.config.server.native.search-locations=file:///Users//kirylyudayeu//Documents//Config_files // THE CASE WHEN I NEED to read my configs from filesystem(separate path)
spring.profiles.active=git
spring.cloud.config.server.git.uri=https://github.com/kirsing/spring-cloud-config.git
spring.cloud.config.server.git.default-label=master
## timeout - give a 5 sec to connect Github repo, if it's not then it will throw an exception.
## clone-on-start - clone the github repo into local system during the startup itself, if not true value, the cloning of the github repo will happen only when the very first request come to your config server
spring.cloud.config.server.git.timeout=5
spring.cloud.config.server.git.clone-on-start=true
## force-pull - sometimes you might have changed some local changes inside local repo that got cloned inside your config server, by mentioning this force-pull as a true value, we're telling to override all the local changes whenever you re trying to start or restart config server
spring.cloud.config.server.git.force-pull=true
encrypt.key="345FPQ"

management.endpoints.web.exposure.include=*
management.health.readinessstate.enabled=true
management.health.livenessstate.enabled=true
management.endpoint.health.probes.enabled=true

management.metrics.tags.application=${spring.application.name}
